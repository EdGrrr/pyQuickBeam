##############################
quickbeam.py - python interface to the quickbeam radar simulator

Edward Gryspeerdt, Universit√§t Leipzig - June 2016
##############################


1. Introduction
---------------
This is a python interface to the quickbeam radar simulator (v1.1a) by
John Haynes.

Not all features are implemented yet, inparticular monodisperse
droplet spectra and some of the readin functions.  However, many of
these functions are now superceeded by the python interface.  Several
of the functions in use are just f2py wrappers around the quickbeam
code itself, with the main rewrite being the radar_simulator.f90 code
and the data access functions.


2. Installation
---------------
Run 'make' in the main directory.  Add this directory to your
$PYTHONPATH.


3. Usage
--------
Much of the design is the same as quickbeam itself.  The simulator is
run from the Quickbeam class, which does much of the setup upon
initialisation (reading in the mie tables etc.).  Details can be
changed in this instance (such as the hydrometeor data) and the
simulator is run by calling the 'radarsim' method, returning the
effective and attenuation corrected Z.

Example (using quickbeam example data):

import quickbeam
qb = quickbeam.Quickbeam()
reflectivity = qb.radarsim()

The structure of the Quickbeam object is

Quickbeam
- settings - dictionary of the radar simulator settings
|             used to be in settings.dat
- met      - dictionary of meteorological data.  Requires
|             four keys, all with shape (ngate, nprofiles)
|             Temperature (K)
|             Pressure (mb)
|             Height (km)
|             RH (%)
- hclass   - list of hydrometeor data.  Each entry is a
             dictionary of the hydrometor parameters.
             The data for each class is now included in
             an entry with the key 'data', with shape
             (ngate, nprofiles)

The output is returned from the 'radarsim' call, there is no longer
an output file.
