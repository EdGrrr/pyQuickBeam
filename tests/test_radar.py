import pyQuickBeam
import unittest
import os
import pytest
import numpy as np


def rmsd(a, b):
    return np.sqrt(np.mean((a-b)**2))

# Test radarsim output (Height, Zeff, Zray, Zcorr)
testdata = np.array([
    [2.37500000e+01, -9.99000000e+02, -9.99000000e+02, -9.99000000e+02],
    [2.17100000e+01, -9.99000000e+02, -9.99000000e+02, -9.99000000e+02],
    [1.99700000e+01, -9.99000000e+02, -9.99000000e+02, -9.99000000e+02],
    [1.85000000e+01, -9.99000000e+02, -9.99000000e+02, -9.99000000e+02],
    [1.70000000e+01, -9.99000000e+02, -9.99000000e+02, -9.99000000e+02],
    [1.54600000e+01, -9.99000000e+02, -9.99000000e+02, -9.99000000e+02],
    [1.42200000e+01, -9.99000000e+02, -9.99000000e+02, -9.99000000e+02],
    [1.32500000e+01, -9.99000000e+02, -9.99000000e+02, -9.99000000e+02],
    [1.22500000e+01, -2.86823529e+02, -2.54316104e+02, -2.86991009e+02],
    [1.12500000e+01, -4.33885091e+01,  1.03150894e+01, -4.36173640e+01],
    [1.02500000e+01, -2.49513069e+01,  2.87461722e+01, -2.52601266e+01],
    [9.25000000e+00, -1.48770438e+01,  3.88171755e+01, -1.52793176e+01],
    [8.25000000e+00, -1.39276095e+01,  3.98777342e+01, -1.44429144e+01],
    [7.20700000e+00, -1.11115501e+01,  4.26627197e+01, -1.17641383e+01],
    [6.47800000e+00, -9.31202916e+00,  4.44401063e+01, -1.01379989e+01],
    [5.99900000e+00, -7.50840635e+00,  4.62086158e+01, -8.48453834e+00],
    [5.50400000e+00, -5.67799457e+00,  4.85310516e+01, -6.77093513e+00],
    [5.02400000e+00, -7.86829060e+00,  4.63165277e+01, -9.10707137e+00],
    [4.56600000e+00, -1.42788898e+01,  3.97576744e+01, -1.56777467e+01],
    [4.12900000e+00, -5.84757045e+00,  4.05015358e+01, -7.38906338e+00],
    [3.71300000e+00, -5.32811239e+00,  3.81015407e+01, -7.01534398e+00],
    [3.31800000e+00, -4.86115769e+00,  2.73541982e+01, -6.71707682e+00],
    [2.94500000e+00, -4.49315800e-01,  2.42674411e+01, -2.47215185e+00],
    [2.59200000e+00,  5.76294276e+00,  2.80676785e+01,  3.56087653e+00],
    [2.26100000e+00,  5.37622995e+00,  2.92769149e+01,  2.87221970e+00],
    [1.95000000e+00,  6.43237499e+00,  3.02099061e+01,  3.49597180e+00],
    [1.66100000e+00,  8.47062518e+00,  3.21653247e+01,  5.28139831e+00],
    [1.39200000e+00,  8.57868755e+00,  3.21578692e+01,  5.05465288e+00],
    [1.14500000e+00,  8.80555331e+00,  3.23420078e+01,  4.92190388e+00],
    [9.18000000e-01,  9.01231935e+00,  3.24658547e+01,  4.79155137e+00],
    [7.13000000e-01,  9.15530722e+00,  3.25439205e+01,  4.60344709e+00],
    [5.29000000e-01,  9.28528376e+00,  3.26016774e+01,  4.41671168e+00],
    [3.66000000e-01,  9.39007439e+00,  3.26461734e+01,  4.22229041e+00],
    [2.23000000e-01,  9.46886002e+00,  3.26755806e+01,  4.02258867e+00],
    [9.80000000e-02,  9.52181953e+00,  3.26763616e+01,  3.82045238e+00],
    [2.00000000e-02,  9.54097119e+00,  3.26869863e+01,  3.60456065e+00]])


class TestRadar(unittest.TestCase):
    def setUp(self):
        self.testdata = testdata
        self.qb = pyQuickBeam.Quickbeam()

    def test_Zeff(self):
        self.qb.settings['do_ray'] = 0
        refl = self.qb.radarsim()
        assert(rmsd(refl['Zeff'].T[0], self.testdata[:, 1])<0.1)

    def test_Zeff_raycalc(self):
        self.qb.settings['do_ray'] = 1
        refl = self.qb.radarsim()
        assert(rmsd(refl['Zeff'].T[0], self.testdata[:, 1])<0.1)

    def test_Zrayleigh(self):
        self.qb.settings['do_ray'] = 1
        refl = self.qb.radarsim()
        assert(rmsd(refl['Zray'].T[0], self.testdata[:, 2])<0.1)
        self.qb.settings['do_ray'] = 0
        
    def test_Zcorr(self):
        self.qb.settings['do_ray'] = 0
        refl = self.qb.radarsim()
        assert(rmsd(refl['Zcorr'].T[0], self.testdata[:, 3])<0.1)

    def test_Zcorr_raycalc(self):
        self.qb.settings['do_ray'] = 1
        refl = self.qb.radarsim()
        assert(rmsd(refl['Zcorr'].T[0], self.testdata[:, 3])<0.1)
